import net.fabricmc.loom.task.RemapJarTask
import net.fabricmc.loom.task.RunClientTask
import net.fabricmc.loom.task.RunServerTask

plugins {
    id 'fabric-loom' version '0.6-SNAPSHOT'
    id 'maven-publish'
}

apply plugin: "java"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "AperLambda"
        url = 'https://aperlambda.github.io/maven'
    }
    maven { url = "https://jitpack.io" }
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

task runTestmodClient(type: RunClientTask) {
    classpath sourceSets.testmod.runtimeClasspath
}

task runTestmodServer(type: RunServerTask) {
    classpath sourceSets.testmod.runtimeClasspath
}

//publishing {
//    publications {
//        maven(MavenPublication) {
//            artifact(remapJar) {
//                builtBy remapJar
//            }
//
//            pom {
//                name = "MCGUI"
//                description = "A GUI library for fabric. Simple HTML like syntax and easy to use. "
//            }
//        }
//    }
//
//    repositories {
//        maven {
//            url "https://repo.repsy.io/mvn/px01tv/hubbajub/"
//            credentials {
//                username = repsyUsername
//                password = repsyPassword
//            }
//        }
//    }
//}

configurations {
    shadow
    api.extendsFrom shadow
}

dependencies {

    // FabricMC Core
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // SpruceUI
    modImplementation "com.github.lambdaurora:spruceui:${project.spruceui_version}"
    api "com.github.lambdaurora:spruceui:${project.spruceui_version}"
    include "org.reflections:reflections:0.9.12"

    shadow ("org.aperlambda:lambdajcommon:1.8.1") {
        exclude group: 'com.google.code.gson'
        exclude group: 'com.google.guava'
    }

    implementation fileTree(dir: 'libs', include: '*.jar')

    testmodCompile sourceSets.main.output
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

task shadowJar(type: Jar) {
    archiveClassifier.set("dev")

    from sourceSets.main.output

    from {
        configurations.shadow.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

task shadowRemapJar(type: RemapJarTask) {
    dependsOn shadowJar

    input = file("${project.buildDir}/libs/$archivesBaseName-$version-dev.jar")
    archiveName = "${archivesBaseName}-${version}.jar"
    addNestedDependencies = true
}

jar {
    from "LICENSE"
}